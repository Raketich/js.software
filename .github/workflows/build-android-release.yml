name: Build and Sign Android App

on:
  push:
    branches: [ci/tauri-workflows]
  pull_request:
    branches: [ci/tauri-workflows]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Android SDK and NDK
        uses: android-actions/setup-android@v3

      - name: Accept SDK Licenses
        run: yes | sdkmanager --licenses

      - name: Install Android NDK
        run: sdkmanager --install "ndk;25.2.9519653"

      - name: Install dependencies
        run: bun install --frozen

      - name: Set Version
        shell: bash
        run: |
          echo "Version: 1.0.${GITHUB_RUN_NUMBER}"
          sed -i "s/\"version\": \".*\"/\"version\": \"1.0.${GITHUB_RUN_NUMBER}\"/" package.json
          sed -i "s/\"version\": \".*\"/\"version\": \"1.0.${GITHUB_RUN_NUMBER}\"/" src-tauri/tauri.conf.json

      - name: Build frontend
        run: bun run build:just

      - name: Initialize Android project
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_SDK_ROOT }}/ndk/25.2.9519653
          NDK_HOME: ${{ env.ANDROID_SDK_ROOT }}/ndk/25.2.9519653
        run: bun run tauri android init

      # Official Tauri Android signing method
      - name: Setup Android signing (Official Tauri Method)
        working-directory: src-tauri/gen/android
        run: |
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          echo "storePassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties

      # Build release APK using Tauri (release mode is default)
      - name: Build Android app
        env:
          ANDROID_NDK_HOME: ${{ env.ANDROID_SDK_ROOT }}/ndk/25.2.9519653
          NDK_HOME: ${{ env.ANDROID_SDK_ROOT }}/ndk/25.2.9519653
        run: bun run tauri android build

      - name: Find APK location
        run: |
          echo "Searching for APK files:"
          find src-tauri -name "*.apk" -type f | tee apk-files.txt

          # Look for release APK with multiple patterns
          APK_PATH=$(find src-tauri -name "*release*.apk" -type f | head -n 1)
          if [ -z "$APK_PATH" ]; then
            # Fallback: look for any APK in release directory
            APK_PATH=$(find src-tauri -path "*/release/*" -name "*.apk" -type f | head -n 1)
          fi
          if [ -z "$APK_PATH" ]; then
            # Fallback: look for APK in build outputs
            APK_PATH=$(find src-tauri/gen/android -name "*.apk" -type f | head -n 1)
          fi

          if [ -z "$APK_PATH" ]; then
            echo "Error: No APK file found!"
            echo "Found files:"
            cat apk-files.txt
            echo "Directory structure:"
            find src-tauri -type d | head -20
            exit 1
          fi

          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
          echo "Found release APK at: $APK_PATH"
          ls -la "$APK_PATH"

          # Verify APK is signed
          echo "Verifying APK signature..."
          aapt dump badging "$APK_PATH" | head -5 || echo "Could not verify APK details"

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: js-software-ui-android-release
          path: ${{ env.APK_PATH }}
          if-no-files-found: error

      # Firebase App Distribution
      - name: Setup Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash
          firebase --version

      - name: Authenticate with Firebase
        env:
          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "$FIREBASE_SERVICE_ACCOUNT_KEY" | base64 -d > $RUNNER_TEMP/firebase-service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$RUNNER_TEMP/firebase-service-account.json" >> $GITHUB_ENV
          export GOOGLE_APPLICATION_CREDENTIALS=$RUNNER_TEMP/firebase-service-account.json
          firebase projects:list

      - name: Upload to Firebase App Distribution
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        run: |
          firebase appdistribution:distribute "${{ env.APK_PATH }}" \
            --project "$FIREBASE_PROJECT_ID" \
            --app "$FIREBASE_APP_ID" \
            --groups "internal-team" \
            --release-notes "
          🚀 New JS Software UI Build - Version 1.0.${{ github.run_number }}

          📱 Built from: ${{ github.ref_name }}
          🔗 Commit: ${{ github.sha }}
          👤 Author: ${{ github.actor }}

          📝 Changes in this build:
          ${{ github.event.head_commit.message }}

          💾 Download and install to test the latest features!
          " \
            --testers "${{ vars.FIREBASE_TESTERS || '' }}"

      - name: Clean up Firebase credentials
        if: always()
        run: |
          rm -f $RUNNER_TEMP/firebase-service-account.json
