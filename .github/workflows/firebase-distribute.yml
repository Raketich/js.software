name: Firebase App Distribution

on:
  workflow_dispatch:
    inputs:
      artifact_name:
        description: "Artifact name to download and distribute"
        required: false
        default: "js-software-ui-android-release"
        type: string
      run_id:
        description: "Workflow run ID to download artifact from (leave empty for latest successful build)"
        required: false
        type: string
      release_notes:
        description: "Custom release notes (optional)"
        required: false
        type: string

jobs:
  distribute:
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact from workflow run
        uses: actions/github-script@v7
        with:
          script: |
            let runId = '${{ github.event.inputs.run_id }}';
            let artifactName = '${{ github.event.inputs.artifact_name }}';

            // If no run_id specified, find the latest successful build
            if (!runId) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'build-android-release.yml',
                status: 'completed',
                conclusion: 'success',
                per_page: 10
              });
              
              if (runs.data.workflow_runs.length === 0) {
                core.setFailed('No successful build runs found');
                return;
              }
              
              runId = runs.data.workflow_runs[0].id;
              console.log(`Using latest successful run: ${runId}`);
            }

            // Get artifacts from the run
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });

            const artifact = artifacts.data.artifacts.find(a => a.name === artifactName);
            if (!artifact) {
              core.setFailed(`Artifact '${artifactName}' not found in run ${runId}`);
              return;
            }

            console.log(`Found artifact: ${artifact.name} (${artifact.size_in_bytes} bytes)`);

            // Download the artifact
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
              archive_format: 'zip'
            });

            const fs = require('fs');
            fs.writeFileSync('artifact.zip', Buffer.from(download.data));
            console.log('Artifact downloaded successfully');

      - name: Extract APK from artifact
        run: |
          unzip -q artifact.zip
          APK_FILE=$(find . -name "*.apk" -type f | head -n 1)

          if [ -z "$APK_FILE" ]; then
            echo "Error: No APK file found in artifact"
            echo "Contents of artifact:"
            ls -la
            exit 1
          fi

          echo "APK_PATH=$APK_FILE" >> $GITHUB_ENV
          echo "Found APK: $APK_FILE"
          ls -la "$APK_FILE"

      - name: Setup Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash
          firebase --version

      - name: Authenticate with Firebase
        env:
          FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        run: |
          echo "$FIREBASE_SERVICE_ACCOUNT_KEY" | base64 -d > $RUNNER_TEMP/firebase-service-account.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=$RUNNER_TEMP/firebase-service-account.json" >> $GITHUB_ENV
          export GOOGLE_APPLICATION_CREDENTIALS=$RUNNER_TEMP/firebase-service-account.json
          firebase projects:list

      - name: Upload to Firebase App Distribution
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
        run: |
          # Use custom release notes if provided, otherwise generate default ones
          CUSTOM_NOTES="${{ github.event.inputs.release_notes }}"
          if [ -n "$CUSTOM_NOTES" ]; then
            RELEASE_NOTES="$CUSTOM_NOTES"
          else
            RELEASE_NOTES="ðŸš€ Manual Firebase Distribution Test - $(date '+%Y-%m-%d %H:%M:%S')

          ðŸ“± Artifact: ${{ github.event.inputs.artifact_name }}
          ðŸ”— Run ID: ${{ github.event.inputs.run_id || 'latest' }}
          ðŸ‘¤ Triggered by: ${{ github.actor }}

          ðŸ’¾ Download and install to test!"
          fi

          firebase appdistribution:distribute "${{ env.APK_PATH }}" \
            --project "$FIREBASE_PROJECT_ID" \
            --app "$FIREBASE_APP_ID" \
            --groups "internal-team" \
            --release-notes "$RELEASE_NOTES" \
            --testers "${{ vars.FIREBASE_TESTERS || '' }}"

      - name: Clean up Firebase credentials
        if: always()
        run: |
          rm -f $RUNNER_TEMP/firebase-service-account.json
          rm -f artifact.zip
