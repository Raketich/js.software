name: Build iOS TestFlight Distribution

on:
  push:
    branches: [ci/tauri-workflows]
  pull_request:
    branches: [ci/tauri-workflows]
  workflow_dispatch:
    inputs:
      release_notes:
        description: "Release notes for TestFlight"
        required: false
        default: ""

jobs:
  build-ios-testflight:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install iOS Dependencies
        run: rustup target add aarch64-apple-ios

      - name: Install dependencies
        run: bun install

      - name: Build frontend
        run: bun run build

      # Extract project configuration from Tauri config
      - name: Extract project configuration
        run: |
          # Read bundle ID and app name from Tauri config
          BUNDLE_ID=$(jq -r '.identifier' src-tauri/tauri.conf.json)
          APP_NAME=$(jq -r '.productName' src-tauri/tauri.conf.json)

          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

          echo "üìã Detected Bundle ID: $BUNDLE_ID"
          echo "üìã Detected App Name: $APP_NAME"

      # Automated version management for TestFlight
      - name: Automated Version Management
        run: |
          echo "üî¢ Setting up automated versioning for TestFlight..."

          # Get current version from Tauri config
          CURRENT_VERSION=$(jq -r '.version // "1.0.0"' src-tauri/tauri.conf.json)

          # Create new build number using GitHub run number for uniqueness
          # Format: YYYYMMDD.RUN_NUMBER (e.g., 20250109.123)
          BUILD_DATE=$(date +%Y%m%d)
          NEW_BUILD_NUMBER="${BUILD_DATE}.${{ github.run_number }}"

          # For TestFlight, we can also use a simpler incrementing scheme
          # Alternative: just use run number if you prefer shorter build numbers
          # NEW_BUILD_NUMBER="${{ github.run_number }}"

          echo "MARKETING_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "BUNDLE_VERSION=$NEW_BUILD_NUMBER" >> $GITHUB_ENV

          echo "üì± Marketing Version (CFBundleShortVersionString): $CURRENT_VERSION"
          echo "üî¢ Bundle Version (CFBundleVersion): $NEW_BUILD_NUMBER"
          echo "üèÉ GitHub Run Number: ${{ github.run_number }}"

          # Update Tauri config with new version scheme
          # Keep the marketing version, but prepare for bundle version override
          jq --arg version "$CURRENT_VERSION" '.version = $version' src-tauri/tauri.conf.json > tmp.json && mv tmp.json src-tauri/tauri.conf.json

          echo "‚úÖ Version configuration prepared"

      # Import App Store distribution certificate
      - name: Setup iOS App Store signing
        id: ios-signing
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_APPSTORE_CERTIFICATE }}
          p12-password: ${{ secrets.IOS_APPSTORE_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ github.run_id }}
          create-keychain: true

      # Install App Store provisioning profile
      - name: Install App Store provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo -n "${{ secrets.IOS_APPSTORE_PROVISIONING_PROFILE }}" | base64 --decode > appstore.mobileprovision

          # Verify the provisioning profile was decoded properly
          if [ ! -s appstore.mobileprovision ]; then
            echo "‚ùå Failed to decode provisioning profile - check IOS_APPSTORE_PROVISIONING_PROFILE secret"
            exit 1
          fi

          # Extract UUID from provisioning profile for proper naming
          PROFILE_UUID=$(security cms -D -i appstore.mobileprovision | plutil -extract UUID xml1 - -o - | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')

          if [ -z "$PROFILE_UUID" ]; then
            echo "‚ùå Failed to extract UUID from provisioning profile"
            echo "Profile content preview:"
            head -20 appstore.mobileprovision
            exit 1
          fi

          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "üìã Extracted Profile UUID: $PROFILE_UUID"

          # Install with proper UUID naming
          cp appstore.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision

          # Verify installation
          if [ -f ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision ]; then
            echo "‚úÖ Provisioning profile installed successfully"
          else
            echo "‚ùå Failed to install provisioning profile"
            exit 1
          fi

          # Clean up
          rm appstore.mobileprovision

      # Add iOS team configuration to Tauri config
      - name: Add iOS section with developmentTeam
        run: |
          if grep -q '"iOS": {' src-tauri/tauri.conf.json; then
            sed -i '' 's/"developmentTeam": "[^"]*"/"developmentTeam": "${{ secrets.APPLE_TEAM_ID }}"/' src-tauri/tauri.conf.json
          else
            jq '.bundle.iOS = {"developmentTeam": "${{ secrets.APPLE_TEAM_ID }}"}' src-tauri/tauri.conf.json > tmp.json && mv tmp.json src-tauri/tauri.conf.json
          fi

      # Initialize Tauri iOS project
      - name: Initialize Tauri iOS
        run: bun run tauri ios init

      # Add export compliance to skip manual review
      - name: Add export compliance to Info.plist
        run: |
          INFO_PLIST="src-tauri/gen/apple/app_iOS/Info.plist"

          if [ -f "$INFO_PLIST" ]; then
            echo "üìù Adding export compliance to Info.plist..."
            
            # Add ITSAppUsesNonExemptEncryption = NO to bypass export compliance dialog
            /usr/libexec/PlistBuddy -c "Add :ITSAppUsesNonExemptEncryption bool false" "$INFO_PLIST" 2>/dev/null || \
            /usr/libexec/PlistBuddy -c "Set :ITSAppUsesNonExemptEncryption false" "$INFO_PLIST"
            
            echo "‚úÖ Export compliance added to Info.plist"
            echo "üîç Verifying Info.plist entry:"
            /usr/libexec/PlistBuddy -c "Print :ITSAppUsesNonExemptEncryption" "$INFO_PLIST"
          else
            echo "‚ö†Ô∏è Info.plist not found at $INFO_PLIST"
          fi

      # Apply version configuration to iOS project
      - name: Apply automated versioning to iOS project
        run: |
          INFO_PLIST="src-tauri/gen/apple/app_iOS/Info.plist"

          if [ -f "$INFO_PLIST" ]; then
            echo "üìù Applying automated versioning to iOS project..."
            
            # Set CFBundleShortVersionString (marketing version)
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ env.MARKETING_VERSION }}" "$INFO_PLIST"
            
            # Set CFBundleVersion (bundle version) - this must be unique for each TestFlight upload
            /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ env.BUNDLE_VERSION }}" "$INFO_PLIST"
            
            echo "‚úÖ Version configuration applied to Info.plist"
            echo "üì± Marketing Version: ${{ env.MARKETING_VERSION }}"
            echo "üî¢ Bundle Version: ${{ env.BUNDLE_VERSION }}"
            
            # Verify the changes
            echo "üîç Current Info.plist versions:"
            /usr/libexec/PlistBuddy -c "Print :CFBundleShortVersionString" "$INFO_PLIST"
            /usr/libexec/PlistBuddy -c "Print :CFBundleVersion" "$INFO_PLIST"
          else
            echo "‚ùå Info.plist not found at $INFO_PLIST"
            echo "üîç Looking for Info.plist in alternative locations:"
            find src-tauri/gen -name "Info.plist" -type f || echo "No Info.plist found"
            exit 1
          fi

      # Apply App Store signing fixes
      - name: Apply App Store signing fixes
        run: |
          PBXPROJ_FILE="src-tauri/gen/apple/app.xcodeproj/project.pbxproj"

          # Fix bundle ID to match Tauri configuration
          CURRENT_BUNDLE_ID=$(grep -o "PRODUCT_BUNDLE_IDENTIFIER = [^;]*" "$PBXPROJ_FILE" | head -1 | sed 's/PRODUCT_BUNDLE_IDENTIFIER = //')
          if [ -n "$CURRENT_BUNDLE_ID" ] && [ "$CURRENT_BUNDLE_ID" != "${{ env.BUNDLE_ID }}" ]; then
            ESCAPED_CURRENT=$(echo "$CURRENT_BUNDLE_ID" | sed 's/\./\\./g')
            sed -i '' "s/$ESCAPED_CURRENT/${{ env.BUNDLE_ID }}/g" "$PBXPROJ_FILE"
          fi

          # Switch to manual signing
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' "$PBXPROJ_FILE"
          sed -i '' 's/"CODE_SIGN_STYLE\[sdk=iphoneos\*\]" = Automatic;/"CODE_SIGN_STYLE[sdk=iphoneos*]" = Manual;/g' "$PBXPROJ_FILE"
          sed -i '' 's/ProvisioningStyle = Automatic;/ProvisioningStyle = Manual;/g' "$PBXPROJ_FILE"

          # Set App Store code sign identity
          sed -i '' 's/"CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]" = "iPhone Developer";/"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "Apple Distribution";/g' "$PBXPROJ_FILE"
          sed -i '' 's/CODE_SIGN_IDENTITY = "iPhone Developer";/CODE_SIGN_IDENTITY = "Apple Distribution";/g' "$PBXPROJ_FILE"
          sed -i '' 's/"iPhone Developer"/"Apple Distribution"/g' "$PBXPROJ_FILE"
          sed -i '' 's/"iPhone Distribution"/"Apple Distribution"/g' "$PBXPROJ_FILE"

          # Set development team
          sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "${{ secrets.APPLE_TEAM_ID }}";/g' "$PBXPROJ_FILE"
          if ! grep -q "DEVELOPMENT_TEAM" "$PBXPROJ_FILE"; then
            sed -i '' '/CODE_SIGN_IDENTITY.*Apple Distribution/a\
          				DEVELOPMENT_TEAM = "${{ secrets.APPLE_TEAM_ID }}";' "$PBXPROJ_FILE"
          fi

          # Add provisioning profile specifier
          sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' "$PBXPROJ_FILE"
          sed -i '' '/CODE_SIGN_IDENTITY.*Apple Distribution/a\
          				PROVISIONING_PROFILE_SPECIFIER = "'$PROFILE_UUID'";' "$PBXPROJ_FILE"

          # Remove old provisioning profile settings
          sed -i '' '/PROVISIONING_PROFILE = /d' "$PBXPROJ_FILE"

      # Create export options for App Store
      - name: Create exportOptions.plist
        run: |
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>provisioningProfiles</key>
              <dict>
                  <key>${{ env.BUNDLE_ID }}</key>
                  <string>${PROFILE_UUID}</string>
              </dict>
          </dict>
          </plist>
          EOF

          # Copy to multiple locations where Tauri might look for it
          cp exportOptions.plist src-tauri/
          cp exportOptions.plist src-tauri/gen/apple/
          mkdir -p src-tauri/gen/apple/app.xcodeproj
          cp exportOptions.plist src-tauri/gen/apple/app.xcodeproj/

      # Build for App Store
      - name: Build iOS app for App Store
        env:
          DEVELOPER_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd src-tauri

          echo "üî® Starting Tauri iOS build..."
          echo "Working directory: $(pwd)"
          echo "Bundle ID: ${{ env.BUNDLE_ID }}"
          echo "App Name: ${{ env.APP_NAME }}"

          # Run Tauri build (may fail on export but still create xcarchive)
          echo "üöÄ Running Tauri iOS build..."
          BUILD_SUCCESS=false
          if bun tauri ios build --export-method app-store-connect; then
            BUILD_SUCCESS=true
            echo "‚úÖ Tauri build and export completed successfully"
          else
            echo "‚ö†Ô∏è Tauri export failed, but checking for xcarchive..."
          fi

          # Always check for IPA files first
          echo "üîç Searching for IPA files in all locations..."

          # Check workspace root first (where xcodebuild exports)
          find "$GITHUB_WORKSPACE" -name "*.ipa" -type f -exec ls -la {} \; 2>/dev/null || echo "No IPA in workspace root"

          # Check src-tauri directory
          find . -name "*.ipa" -type f -exec ls -la {} \; 2>/dev/null || echo "No IPA in src-tauri"

          # Look for IPA in common locations
          IPA_LOCATIONS=(
            "$GITHUB_WORKSPACE/*.ipa"
            "./*.ipa"
            "./target/*.ipa"
            "./gen/apple/*.ipa"
            "../*.ipa"
          )

          FOUND_IPA=""
          for pattern in "${IPA_LOCATIONS[@]}"; do
            for file in $pattern; do
              if [ -f "$file" ]; then
                FOUND_IPA="$file"
                echo "üì¶ Found IPA: $FOUND_IPA"
                break 2
              fi
            done
          done

          # If no IPA found, try manual export from xcarchive
          if [ -z "$FOUND_IPA" ]; then
            echo "üîç No IPA found, looking for xcarchive to export manually..."
            
            # Find xcarchive
            XCARCHIVE_PATH=$(find . -name "*.xcarchive" -type d | head -n 1)
            if [ -n "$XCARCHIVE_PATH" ]; then
              echo "üì¶ Found xcarchive: $XCARCHIVE_PATH"
              
              # Check xcarchive contents
              echo "üîç xcarchive contents:"
              find "$XCARCHIVE_PATH" -type f -name "*.app" | head -5
              
              # Manual export using xcodebuild
              IPA_NAME="${APP_NAME// /_}_TestFlight.ipa"
              EXPORT_PATH="$GITHUB_WORKSPACE/export"
              mkdir -p "$EXPORT_PATH"
              
              echo "üîÑ Manually exporting IPA from xcarchive..."
              echo "Archive: $XCARCHIVE_PATH"
              echo "Export path: $EXPORT_PATH"
              echo "Export options: $GITHUB_WORKSPACE/exportOptions.plist"
              
              # Show export options for debugging
              echo "üìã Export options content:"
              cat "$GITHUB_WORKSPACE/exportOptions.plist"
              
              if xcodebuild -exportArchive \
                -archivePath "$XCARCHIVE_PATH" \
                -exportPath "$EXPORT_PATH" \
                -exportOptionsPlist "$GITHUB_WORKSPACE/exportOptions.plist" \
                -verbose; then
                
                echo "‚úÖ Manual export succeeded"
                
                # Find the exported IPA
                EXPORTED_IPA=$(find "$EXPORT_PATH" -name "*.ipa" -type f | head -n 1)
                if [ -n "$EXPORTED_IPA" ]; then
                  echo "üì¶ Found exported IPA: $EXPORTED_IPA"
                  FOUND_IPA="$EXPORTED_IPA"
                else
                  echo "‚ùå No IPA found after export"
                  echo "üîç Export directory contents:"
                  ls -la "$EXPORT_PATH" || echo "Export directory not found"
                fi
              else
                echo "‚ùå Manual export also failed"
                echo "üîç Checking provisioning profile setup..."
                
                # Debug provisioning profiles
                echo "üîç Installed provisioning profiles:"
                ls -la ~/Library/MobileDevice/Provisioning\ Profiles/ 2>/dev/null || echo "No provisioning profiles directory"
                
                # Check if our profile is there
                if [ -n "${{ env.PROFILE_UUID }}" ]; then
                  PROFILE_FILE=~/Library/MobileDevice/Provisioning\ Profiles/${{ env.PROFILE_UUID }}.mobileprovision
                  if [ -f "$PROFILE_FILE" ]; then
                    echo "‚úÖ Our profile exists: $PROFILE_FILE"
                    echo "üîç Profile info:"
                    security cms -D -i "$PROFILE_FILE" | head -20
                  else
                    echo "‚ùå Our profile missing: $PROFILE_FILE"
                  fi
                else
                  echo "‚ùå PROFILE_UUID is empty - provisioning profile step failed"
                fi
                
                # Check certificates
                echo "üîç Available certificates:"
                security find-identity -p codesigning -v
                
                exit 1
              fi
            else
              echo "‚ùå No xcarchive found either"
              echo "üîç Looking for any build artifacts:"
              find . -type f -name "*" | grep -E "\.(app|xcarchive)$" || echo "No iOS build artifacts found"
              exit 1
            fi
          fi

          # If we found an IPA, prepare it
          if [ -n "$FOUND_IPA" ]; then
            echo "‚úÖ IPA found at: $FOUND_IPA"
            echo "üìè IPA size: $(ls -lh "$FOUND_IPA" | awk '{print $5}')"
            
            # Copy to consistent location if needed
            IPA_NAME="${APP_NAME// /_}_TestFlight.ipa"
            TARGET_PATH="$GITHUB_WORKSPACE/$IPA_NAME"
            
            if [ "$FOUND_IPA" != "$TARGET_PATH" ]; then
              echo "üìã Copying IPA to: $TARGET_PATH"
              cp "$FOUND_IPA" "$TARGET_PATH"
            fi
            
            # Verify final IPA
            if [ -f "$TARGET_PATH" ]; then
              echo "‚úÖ Final IPA ready: $TARGET_PATH"
              echo "üìè Final size: $(ls -lh "$TARGET_PATH" | awk '{print $5}')"
              echo "IPA_PATH=$TARGET_PATH" >> $GITHUB_ENV
            else
              echo "‚ùå Failed to prepare final IPA"
              exit 1
            fi
          else
            echo "‚ùå No IPA could be created or found!"
            exit 1
          fi

      # Verify IPA before upload
      - name: Verify IPA before upload
        run: |
          echo "üîç Verifying IPA file before upload..."

          if [ -z "${{ env.IPA_PATH }}" ]; then
            echo "‚ùå IPA_PATH environment variable is not set"
            exit 1
          fi

          if [ ! -f "${{ env.IPA_PATH }}" ]; then
            echo "‚ùå IPA file not found at: ${{ env.IPA_PATH }}"
            echo "üîç Workspace contents:"
            ls -la "$GITHUB_WORKSPACE"
            echo "üîç Looking for any IPA files:"
            find "$GITHUB_WORKSPACE" -name "*.ipa" -type f -exec ls -la {} \; || echo "No IPA files found"
            exit 1
          fi

          echo "‚úÖ IPA file verified: ${{ env.IPA_PATH }}"
          echo "üìè File size: $(ls -lh "${{ env.IPA_PATH }}" | awk '{print $5}')"
          echo "üîê File permissions: $(ls -l "${{ env.IPA_PATH }}" | awk '{print $1}')"

      # Setup App Store Connect API
      - name: Setup App Store Connect API
        run: |
          # Create API key file from secret for uploads (Developer role)
          mkdir -p ~/.appstoreconnect/private_keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

          # Set permissions
          chmod 600 ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

          # Create API key file for tester management (App Manager role) if available
          if [ -n "${{ secrets.APP_STORE_CONNECT_TESTER_API_KEY_ID }}" ] && [ -n "${{ secrets.APP_STORE_CONNECT_TESTER_API_KEY }}" ]; then
            echo "${{ secrets.APP_STORE_CONNECT_TESTER_API_KEY }}" | base64 -d > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_TESTER_API_KEY_ID }}.p8
            chmod 600 ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_TESTER_API_KEY_ID }}.p8
            echo "‚úÖ Tester management API key configured"
          else
            echo "‚ÑπÔ∏è Tester management API key not configured - will use upload key (requires App Manager role)"
          fi

      # Upload to TestFlight
      - name: Upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          # Generate release notes
          CUSTOM_NOTES="${{ github.event.inputs.release_notes }}"
          if [ -n "$CUSTOM_NOTES" ]; then
            RELEASE_NOTES="$CUSTOM_NOTES"
          else
            RELEASE_NOTES="üöÄ New ${{ env.APP_NAME }} iOS Build - Version ${{ env.MARKETING_VERSION }} (Build ${{ env.BUNDLE_VERSION }})

          üì± Built from: ${{ github.ref_name }}
          üîó Commit: ${{ github.sha }}
          üë§ Author: ${{ github.actor }}
          üèÉ Build Number: ${{ github.run_number }}

          üìù Changes in this build:
          ${{ github.event.head_commit.message }}

          üíæ Download from TestFlight to test the latest features!"
          fi

          # Create temporary file for release notes
          echo "$RELEASE_NOTES" > /tmp/release_notes.txt

          # Upload to TestFlight using xcrun altool
          xcrun altool --upload-app \
            --type ios \
            --file "${{ env.IPA_PATH }}" \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" \
            --verbose

          echo "üéâ Successfully uploaded to TestFlight!"
          echo "üì± Build will be available for internal testing once processed by Apple"

          # Note: Release notes are set separately in App Store Connect after upload
          echo "üí° To add release notes, go to App Store Connect ‚Üí TestFlight ‚Üí Build ‚Üí What to Test"

      # Add internal testers (if configured)
      - name: Notify internal testers
        continue-on-error: true
        run: |
          if [ -n "${{ vars.TESTFLIGHT_INTERNAL_TESTERS }}" ]; then
            echo "üìß Internal testers configured: ${{ vars.TESTFLIGHT_INTERNAL_TESTERS }}"
            echo "üîÑ Testers will be automatically notified when build is processed"
            echo "‚è±Ô∏è  Processing usually takes 5-15 minutes"
          else
            echo "‚ÑπÔ∏è No internal testers configured via TESTFLIGHT_INTERNAL_TESTERS variable"
            echo "üí° Add testers manually in App Store Connect ‚Üí TestFlight ‚Üí Internal Testing"
          fi

      # Manage TestFlight Internal Testers
      - name: Manage TestFlight Internal Testers
        if: vars.TESTFLIGHT_INTERNAL_TESTERS != ''
        continue-on-error: true # Don't fail the build if tester management fails
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_TESTER_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_TESTER_API_KEY_ID }}
        run: |
          echo "üîß Managing TestFlight Internal Testers..."

          # Determine which API key to use for tester management
          if [ -n "$APP_STORE_CONNECT_TESTER_API_KEY_ID" ]; then
            TESTER_KEY_ID="$APP_STORE_CONNECT_TESTER_API_KEY_ID"
            echo "üîë Using dedicated App Manager key for tester management"
          else
            TESTER_KEY_ID="$APP_STORE_CONNECT_API_KEY_ID"
            echo "üîë Using upload key for tester management (ensure it has App Manager role)"
          fi

          # Parse tester emails from variable
          IFS=',' read -ra TESTERS <<< "${{ vars.TESTFLIGHT_INTERNAL_TESTERS }}"

          # Get App ID for our bundle
          BUNDLE_ID="${{ env.BUNDLE_ID }}"
          echo "üì± Managing testers for Bundle ID: $BUNDLE_ID"

          # Verify API key file exists
          API_KEY_FILE=~/.appstoreconnect/private_keys/AuthKey_$TESTER_KEY_ID.p8
          if [ ! -f "$API_KEY_FILE" ]; then
            echo "‚ùå API key file not found: $API_KEY_FILE"
            echo "üîç Available API key files:"
            ls -la ~/.appstoreconnect/private_keys/ || echo "No API keys directory found"
            exit 1
          fi

          echo "‚úÖ API key file found: $API_KEY_FILE"

          # Function to make App Store Connect API calls
          make_api_call() {
            local method="$1"
            local endpoint="$2"
            local data="$3"
            
            local jwt_token
            jwt_token=$(generate_jwt_token)
            
            if [ -z "$jwt_token" ]; then
              echo "‚ùå Failed to generate JWT token"
              return 1
            fi
            
            echo "üîç Making API call: $method $endpoint"
            
            local response
            if [ -n "$data" ]; then
              response=$(curl -w "HTTP_CODE:%{http_code}" -s -X "$method" \
                -H "Authorization: Bearer $jwt_token" \
                -H "Content-Type: application/json" \
                -d "$data" \
                "https://api.appstoreconnect.apple.com/v1/$endpoint" 2>/dev/null)
            else
              response=$(curl -w "HTTP_CODE:%{http_code}" -s -X "$method" \
                -H "Authorization: Bearer $jwt_token" \
                "https://api.appstoreconnect.apple.com/v1/$endpoint" 2>/dev/null)
            fi
            
            # Check if curl failed completely
            if [ $? -ne 0 ] || [ -z "$response" ]; then
              echo "‚ùå curl command failed completely"
              echo "üîç Debug info:"
              echo "  Method: $method"
              echo "  Endpoint: $endpoint"
              echo "  JWT token length: ${#jwt_token}"
              return 1
            fi
            
            local http_code="${response##*HTTP_CODE:}"
            local body="${response%HTTP_CODE:*}"
            
            echo "üì° HTTP Status: $http_code"
            
            # Check if we got a valid HTTP code
            if [ -z "$http_code" ] || ! [[ "$http_code" =~ ^[0-9]+$ ]]; then
              echo "‚ùå Invalid or missing HTTP status code"
              echo "üìÑ Raw response:"
              echo "$response"
              return 1
            fi
            
            if [ "$http_code" -ne 200 ] && [ "$http_code" -ne 201 ]; then
              echo "‚ùå API call failed with status $http_code"
              echo "üìÑ Response body:"
              echo "$body" | jq . 2>/dev/null || echo "$body"
              return 1
            fi
            
            echo "$body"
          }

          # Generate JWT token for API authentication
          generate_jwt_token() {
            # Verify required environment variables
            if [ -z "$APP_STORE_CONNECT_ISSUER_ID" ]; then
              echo "‚ùå APP_STORE_CONNECT_ISSUER_ID is missing"
              return 1
            fi
            
            if [ -z "$TESTER_KEY_ID" ]; then
              echo "‚ùå TESTER_KEY_ID is missing"
              return 1
            fi
            
            # Verify API key file exists and is readable
            if [ ! -f "$API_KEY_FILE" ]; then
              echo "‚ùå API key file does not exist: $API_KEY_FILE"
              return 1
            fi
            
            if [ ! -r "$API_KEY_FILE" ]; then
              echo "‚ùå API key file is not readable: $API_KEY_FILE"
              ls -la "$API_KEY_FILE"
              return 1
            fi
            
            # Create JWT header
            JWT_HEADER='{"alg":"ES256","kid":"'$TESTER_KEY_ID'","typ":"JWT"}'
            
            # Create JWT payload
            ISSUED_AT=$(date +%s)
            EXPIRATION=$((ISSUED_AT + 1200)) # 20 minutes
            JWT_PAYLOAD='{"iss":"'$APP_STORE_CONNECT_ISSUER_ID'","iat":'$ISSUED_AT',"exp":'$EXPIRATION',"aud":"appstoreconnect-v1"}'
            
            # Encode header and payload
            JWT_HEADER_B64=$(echo -n "$JWT_HEADER" | base64 | tr -d '=\n' | tr '/+' '_-')
            JWT_PAYLOAD_B64=$(echo -n "$JWT_PAYLOAD" | base64 | tr -d '=\n' | tr '/+' '_-')
            
            # Create signature using API key
            JWT_UNSIGNED="$JWT_HEADER_B64.$JWT_PAYLOAD_B64"
            
            if ! JWT_SIGNATURE=$(echo -n "$JWT_UNSIGNED" | openssl dgst -sha256 -sign "$API_KEY_FILE" | base64 | tr -d '=\n' | tr '/+' '_-' 2>/dev/null); then
              echo "‚ùå Failed to sign JWT token with API key"
              echo "üîç Checking API key file permissions:"
              ls -la "$API_KEY_FILE"
              echo "üîç Testing openssl with API key:"
              openssl ec -in "$API_KEY_FILE" -noout -text 2>&1 | head -5
              echo "üîç Checking if API key is valid ES256 key:"
              if ! openssl ec -in "$API_KEY_FILE" -noout 2>/dev/null; then
                echo "‚ùå API key file is not a valid EC private key"
              fi
              return 1
            fi
            
            local token="$JWT_UNSIGNED.$JWT_SIGNATURE"
            
            # Validate token format
            if [ -z "$token" ] || [ "$(echo "$token" | tr -cd '.' | wc -c)" -ne 2 ]; then
              echo "‚ùå Generated JWT token has invalid format"
              echo "üîç Token preview: ${token:0:50}..."
              return 1
            fi
            
            echo "$token"
          }

          # Test JWT token generation first
          echo "üîê Testing JWT token generation..."
          TEST_TOKEN=$(generate_jwt_token)
          if [ -z "$TEST_TOKEN" ]; then
            echo "‚ùå JWT token generation failed"
            exit 1
          fi
          echo "‚úÖ JWT token generated successfully"

          # Get the app information
          echo "üîç Finding app in App Store Connect..."
          echo "üîç Debug: Bundle ID = '$BUNDLE_ID'"
          echo "üîç Debug: API endpoint = 'apps?filter[bundleId]=$BUNDLE_ID'"

          APPS_RESPONSE=$(make_api_call "GET" "apps?filter[bundleId]=$BUNDLE_ID")

          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to fetch apps from App Store Connect"
            echo "üîç Debug info:"
            echo "  Bundle ID: $BUNDLE_ID"
            echo "  API Key ID: $TESTER_KEY_ID"
            echo "  Issuer ID: $APP_STORE_CONNECT_ISSUER_ID"
            
            # Try to fetch all apps to see what's available
            echo "üîç Attempting to fetch all apps for debugging..."
            ALL_APPS_DEBUG=$(make_api_call "GET" "apps")
            if [ $? -eq 0 ]; then
              echo "‚úÖ All apps API call succeeded - your API key works"
              echo "üìã Available apps:"
              echo "$ALL_APPS_DEBUG" | jq -r '.data[] | "\(.attributes.bundleId) - \(.attributes.name)"' 2>/dev/null || echo "Failed to parse apps list"
            else
              echo "‚ùå All apps API call also failed - API key issue"
            fi
            
            exit 1
          fi

          # Debug: Show apps response
          echo "üìã Apps API response:"
          echo "$APPS_RESPONSE" | jq . 2>/dev/null || echo "$APPS_RESPONSE"

          # Extract app ID
          APP_ID=$(echo "$APPS_RESPONSE" | jq -r '.data[0].id // empty')

          if [ -z "$APP_ID" ]; then
            echo "‚ùå App not found in App Store Connect for Bundle ID: $BUNDLE_ID"
            echo "üí° Possible solutions:"
            echo "   1. Ensure the app is registered in App Store Connect"
            echo "   2. Check that the Bundle ID matches exactly"
            echo "   3. Verify API key has access to this app"
            
            # Show available apps for debugging
            echo "üîç Available apps in your account:"
            ALL_APPS=$(make_api_call "GET" "apps")
            if [ $? -eq 0 ]; then
              echo "$ALL_APPS" | jq -r '.data[] | "\(.attributes.bundleId) - \(.attributes.name)"' 2>/dev/null || echo "Failed to parse apps list"
            fi
            
            exit 1
          fi

          echo "‚úÖ Found app: $APP_ID"

          # Get existing beta testers
          echo "üîç Checking existing internal testers..."
          EXISTING_TESTERS=$(make_api_call "GET" "apps/$APP_ID/betaTesters?filter[betaTesterType]=INTERNAL")

          if [ $? -ne 0 ]; then
            echo "‚ùå Failed to fetch existing testers"
            exit 1
          fi

          # Process each tester email
          for email in "${TESTERS[@]}"; do
            # Trim whitespace
            email=$(echo "$email" | xargs)
            echo "üë§ Processing tester: $email"
            
            # Check if tester already exists
            EXISTING_TESTER_ID=$(echo "$EXISTING_TESTERS" | jq -r --arg email "$email" '.data[] | select(.attributes.email == $email) | .id // empty')
            
            if [ -n "$EXISTING_TESTER_ID" ]; then
              echo "‚úÖ Tester $email already exists as internal tester"
            else
              echo "üÜï Adding new internal tester: $email"
              
              # Create new beta tester
              TESTER_DATA='{
                "data": {
                  "type": "betaTesters",
                  "attributes": {
                    "email": "'$email'",
                    "firstName": "Internal",
                    "lastName": "Tester"
                  },
                  "relationships": {
                    "apps": {
                      "data": [{"type": "apps", "id": "'$APP_ID'"}]
                    }
                  }
                }
              }'
              
              CREATE_RESPONSE=$(make_api_call "POST" "betaTesters" "$TESTER_DATA")
              
              if [ $? -ne 0 ]; then
                echo "‚ö†Ô∏è Failed to add tester $email"
                continue
              fi
              
              # Check for errors in response
              if echo "$CREATE_RESPONSE" | jq -e '.errors' >/dev/null; then
                echo "‚ö†Ô∏è Error adding tester $email:"
                echo "$CREATE_RESPONSE" | jq -r '.errors[0].detail // .errors[0].title'
                
                # Check if it's because they need to be added to the team first
                if echo "$CREATE_RESPONSE" | grep -q "must be added to your team"; then
                  echo "üí° $email must be added to your App Store Connect team first"
                  echo "   Go to: App Store Connect ‚Üí Users and Access ‚Üí People ‚Üí +"
                fi
              else
                echo "‚úÖ Successfully added internal tester: $email"
              fi
            fi
          done

          echo "üéâ Internal tester management completed!"
          echo "üìß Testers will receive invitations once the build is processed by Apple"
          echo "‚è±Ô∏è This usually takes 5-15 minutes after upload"

      # Clean up API key
      - name: Clean up API key
        if: always()
        run: |
          rm -f ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8
          if [ -n "${{ secrets.APP_STORE_CONNECT_TESTER_API_KEY_ID }}" ]; then
            rm -f ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_TESTER_API_KEY_ID }}.p8
          fi

      # Upload IPA as artifact backup
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-testflight-ipa
          path: ${{ env.IPA_PATH }}
          retention-days: 7

      # Build Summary
      - name: Build Summary
        run: |
          echo "üéâ iOS TestFlight Build Complete!"
          echo "üì± Bundle ID: ${{ env.BUNDLE_ID }}"
          echo "üì± App Name: ${{ env.APP_NAME }}"
          echo "üì± Marketing Version: ${{ env.MARKETING_VERSION }}"
          echo "üî¢ Bundle Version: ${{ env.BUNDLE_VERSION }}"
          echo "üèÉ GitHub Run Number: ${{ github.run_number }}"
          echo "üîê Signed with: Apple Distribution (${{ secrets.APPLE_TEAM_ID }})"
          echo "‚úàÔ∏è Uploaded to TestFlight"
          echo "‚è±Ô∏è Build will be available for internal testing in 5-15 minutes"
          echo "üîó Check status: https://appstoreconnect.apple.com/apps"
