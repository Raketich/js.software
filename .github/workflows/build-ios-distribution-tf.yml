name: Build iOS TestFlight Distribution

on:
  push:
    branches: [ci/tauri-workflows]
  pull_request:
    branches: [ci/tauri-workflows]
  workflow_dispatch:
    inputs:
      release_notes:
        description: "Release notes for TestFlight"
        required: false
        default: ""

jobs:
  build-ios-testflight:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install iOS Dependencies
        run: rustup target add aarch64-apple-ios

      - name: Install dependencies
        run: bun install

      - name: Build frontend
        run: bun run build

      # Extract project configuration from Tauri config
      - name: Extract project configuration
        run: |
          # Read bundle ID and app name from Tauri config
          BUNDLE_ID=$(jq -r '.identifier' src-tauri/tauri.conf.json)
          APP_NAME=$(jq -r '.productName' src-tauri/tauri.conf.json)

          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          echo "APP_NAME=$APP_NAME" >> $GITHUB_ENV

          echo "üìã Detected Bundle ID: $BUNDLE_ID"
          echo "üìã Detected App Name: $APP_NAME"

      # Import App Store distribution certificate
      - name: Setup iOS App Store signing
        id: ios-signing
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_APPSTORE_CERTIFICATE }}
          p12-password: ${{ secrets.IOS_APPSTORE_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ github.run_id }}
          create-keychain: true

      # Install App Store provisioning profile
      - name: Install App Store provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo -n "${{ secrets.IOS_APPSTORE_PROVISIONING_PROFILE }}" | base64 --decode > appstore.mobileprovision

          # Verify the provisioning profile was decoded properly
          if [ ! -s appstore.mobileprovision ]; then
            echo "‚ùå Failed to decode provisioning profile - check IOS_APPSTORE_PROVISIONING_PROFILE secret"
            exit 1
          fi

          # Extract UUID from provisioning profile for proper naming
          PROFILE_UUID=$(security cms -D -i appstore.mobileprovision | plutil -extract UUID xml1 - -o - | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')

          if [ -z "$PROFILE_UUID" ]; then
            echo "‚ùå Failed to extract UUID from provisioning profile"
            echo "Profile content preview:"
            head -20 appstore.mobileprovision
            exit 1
          fi

          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "üìã Extracted Profile UUID: $PROFILE_UUID"

          # Install with proper UUID naming
          cp appstore.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision

          # Verify installation
          if [ -f ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision ]; then
            echo "‚úÖ Provisioning profile installed successfully"
          else
            echo "‚ùå Failed to install provisioning profile"
            exit 1
          fi

          # Clean up
          rm appstore.mobileprovision

      # Add iOS team configuration to Tauri config
      - name: Add iOS section with developmentTeam
        run: |
          if grep -q '"iOS": {' src-tauri/tauri.conf.json; then
            sed -i '' 's/"developmentTeam": "[^"]*"/"developmentTeam": "${{ secrets.APPLE_TEAM_ID }}"/' src-tauri/tauri.conf.json
          else
            jq '.bundle.iOS = {"developmentTeam": "${{ secrets.APPLE_TEAM_ID }}"}' src-tauri/tauri.conf.json > tmp.json && mv tmp.json src-tauri/tauri.conf.json
          fi

      # Initialize Tauri iOS project
      - name: Initialize Tauri iOS
        run: bun run tauri ios init

      # Apply App Store signing fixes
      - name: Apply App Store signing fixes
        run: |
          PBXPROJ_FILE="src-tauri/gen/apple/app.xcodeproj/project.pbxproj"

          # Fix bundle ID to match Tauri configuration
          CURRENT_BUNDLE_ID=$(grep -o "PRODUCT_BUNDLE_IDENTIFIER = [^;]*" "$PBXPROJ_FILE" | head -1 | sed 's/PRODUCT_BUNDLE_IDENTIFIER = //')
          if [ -n "$CURRENT_BUNDLE_ID" ] && [ "$CURRENT_BUNDLE_ID" != "${{ env.BUNDLE_ID }}" ]; then
            ESCAPED_CURRENT=$(echo "$CURRENT_BUNDLE_ID" | sed 's/\./\\./g')
            sed -i '' "s/$ESCAPED_CURRENT/${{ env.BUNDLE_ID }}/g" "$PBXPROJ_FILE"
          fi

          # Switch to manual signing
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' "$PBXPROJ_FILE"
          sed -i '' 's/"CODE_SIGN_STYLE\[sdk=iphoneos\*\]" = Automatic;/"CODE_SIGN_STYLE[sdk=iphoneos*]" = Manual;/g' "$PBXPROJ_FILE"
          sed -i '' 's/ProvisioningStyle = Automatic;/ProvisioningStyle = Manual;/g' "$PBXPROJ_FILE"

          # Set App Store code sign identity
          sed -i '' 's/"CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]" = "iPhone Developer";/"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "Apple Distribution";/g' "$PBXPROJ_FILE"
          sed -i '' 's/CODE_SIGN_IDENTITY = "iPhone Developer";/CODE_SIGN_IDENTITY = "Apple Distribution";/g' "$PBXPROJ_FILE"
          sed -i '' 's/"iPhone Developer"/"Apple Distribution"/g' "$PBXPROJ_FILE"
          sed -i '' 's/"iPhone Distribution"/"Apple Distribution"/g' "$PBXPROJ_FILE"

          # Set development team
          sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "${{ secrets.APPLE_TEAM_ID }}";/g' "$PBXPROJ_FILE"
          if ! grep -q "DEVELOPMENT_TEAM" "$PBXPROJ_FILE"; then
            sed -i '' '/CODE_SIGN_IDENTITY.*Apple Distribution/a\
          				DEVELOPMENT_TEAM = "${{ secrets.APPLE_TEAM_ID }}";' "$PBXPROJ_FILE"
          fi

          # Add provisioning profile specifier
          sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' "$PBXPROJ_FILE"
          sed -i '' '/CODE_SIGN_IDENTITY.*Apple Distribution/a\
          				PROVISIONING_PROFILE_SPECIFIER = "'$PROFILE_UUID'";' "$PBXPROJ_FILE"

          # Remove old provisioning profile settings
          sed -i '' '/PROVISIONING_PROFILE = /d' "$PBXPROJ_FILE"

      # Create export options for App Store
      - name: Create exportOptions.plist
        run: |
          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>app-store</string>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
              <key>provisioningProfiles</key>
              <dict>
                  <key>${{ env.BUNDLE_ID }}</key>
                  <string>${PROFILE_UUID}</string>
              </dict>
          </dict>
          </plist>
          EOF

          # Copy to multiple locations where Tauri might look for it
          cp exportOptions.plist src-tauri/
          cp exportOptions.plist src-tauri/gen/apple/
          mkdir -p src-tauri/gen/apple/app.xcodeproj
          cp exportOptions.plist src-tauri/gen/apple/app.xcodeproj/

      # Build for App Store
      - name: Build iOS app for App Store
        env:
          DEVELOPER_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd src-tauri

          echo "üî® Starting Tauri iOS build..."
          echo "Working directory: $(pwd)"
          echo "Bundle ID: ${{ env.BUNDLE_ID }}"
          echo "App Name: ${{ env.APP_NAME }}"

          # Run Tauri build (may fail on export but still create IPA)
          echo "üöÄ Running Tauri iOS build..."
          bun tauri ios build --export-method app-store-connect || echo "‚ö†Ô∏è Tauri command failed, but checking for IPA anyway..."

          # Always check for IPA files, regardless of Tauri command success
          echo "üîç Searching for IPA files in all locations..."

          # Check workspace root first (where xcodebuild exports)
          find "$GITHUB_WORKSPACE" -name "*.ipa" -type f -exec ls -la {} \; 2>/dev/null || echo "No IPA in workspace root"

          # Check src-tauri directory
          find . -name "*.ipa" -type f -exec ls -la {} \; 2>/dev/null || echo "No IPA in src-tauri"

          # Look for IPA in common locations
          IPA_LOCATIONS=(
            "$GITHUB_WORKSPACE/*.ipa"
            "./*.ipa"
            "./target/*.ipa"
            "./gen/apple/*.ipa"
            "../*.ipa"
          )

          FOUND_IPA=""
          for pattern in "${IPA_LOCATIONS[@]}"; do
            for file in $pattern; do
              if [ -f "$file" ]; then
                FOUND_IPA="$file"
                echo "üì¶ Found IPA: $FOUND_IPA"
                break 2
              fi
            done
          done

          if [ -n "$FOUND_IPA" ]; then
            echo "‚úÖ IPA found at: $FOUND_IPA"
            echo "üìè IPA size: $(ls -lh "$FOUND_IPA" | awk '{print $5}')"
            
            # Copy to consistent location if needed
            IPA_NAME="${APP_NAME// /_}_TestFlight.ipa"
            TARGET_PATH="$GITHUB_WORKSPACE/$IPA_NAME"
            
            if [ "$FOUND_IPA" != "$TARGET_PATH" ]; then
              echo "üìã Copying IPA to: $TARGET_PATH"
              cp "$FOUND_IPA" "$TARGET_PATH"
            fi
            
            # Verify final IPA
            if [ -f "$TARGET_PATH" ]; then
              echo "‚úÖ Final IPA ready: $TARGET_PATH"
              echo "üìè Final size: $(ls -lh "$TARGET_PATH" | awk '{print $5}')"
              echo "IPA_PATH=$TARGET_PATH" >> $GITHUB_ENV
            else
              echo "‚ùå Failed to prepare final IPA"
              exit 1
            fi
          else
            echo "‚ùå No IPA file found anywhere!"
            echo "üîç Full directory scan:"
            find "$GITHUB_WORKSPACE" -type f -name "*" | grep -i ipa || echo "No files containing 'ipa' found"
            echo "üîç Workspace contents:"
            ls -la "$GITHUB_WORKSPACE"
            echo "üîç src-tauri contents:"
            ls -la .
            exit 1
          fi

      # Verify IPA before upload
      - name: Verify IPA before upload
        run: |
          echo "üîç Verifying IPA file before upload..."

          if [ -z "${{ env.IPA_PATH }}" ]; then
            echo "‚ùå IPA_PATH environment variable is not set"
            exit 1
          fi

          if [ ! -f "${{ env.IPA_PATH }}" ]; then
            echo "‚ùå IPA file not found at: ${{ env.IPA_PATH }}"
            echo "üîç Workspace contents:"
            ls -la "$GITHUB_WORKSPACE"
            echo "üîç Looking for any IPA files:"
            find "$GITHUB_WORKSPACE" -name "*.ipa" -type f -exec ls -la {} \; || echo "No IPA files found"
            exit 1
          fi

          echo "‚úÖ IPA file verified: ${{ env.IPA_PATH }}"
          echo "üìè File size: $(ls -lh "${{ env.IPA_PATH }}" | awk '{print $5}')"
          echo "üîê File permissions: $(ls -l "${{ env.IPA_PATH }}" | awk '{print $1}')"

      # Setup App Store Connect API authentication
      - name: Setup App Store Connect API
        run: |
          # Create API key file from secret
          mkdir -p ~/.appstoreconnect/private_keys
          echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d > ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

          # Set permissions
          chmod 600 ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      # Upload to TestFlight
      - name: Upload to TestFlight
        env:
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
        run: |
          # Generate release notes
          CUSTOM_NOTES="${{ github.event.inputs.release_notes }}"
          if [ -n "$CUSTOM_NOTES" ]; then
            RELEASE_NOTES="$CUSTOM_NOTES"
          else
            RELEASE_NOTES="üöÄ New ${{ env.APP_NAME }} iOS Build - Version 1.0.${{ github.run_number }}

          üì± Built from: ${{ github.ref_name }}
          üîó Commit: ${{ github.sha }}
          üë§ Author: ${{ github.actor }}

          üìù Changes in this build:
          ${{ github.event.head_commit.message }}

          üíæ Download from TestFlight to test the latest features!"
          fi

          # Create temporary file for release notes
          echo "$RELEASE_NOTES" > /tmp/release_notes.txt

          # Upload to TestFlight using xcrun altool
          xcrun altool --upload-app \
            --type ios \
            --file "${{ env.IPA_PATH }}" \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_ISSUER_ID" \
            --verbose

          echo "üéâ Successfully uploaded to TestFlight!"
          echo "üì± Build will be available for internal testing once processed by Apple"

          # Note: Release notes are set separately in App Store Connect after upload
          echo "üí° To add release notes, go to App Store Connect ‚Üí TestFlight ‚Üí Build ‚Üí What to Test"

      # Add internal testers (if configured)
      - name: Notify internal testers
        continue-on-error: true
        run: |
          if [ -n "${{ vars.TESTFLIGHT_INTERNAL_TESTERS }}" ]; then
            echo "üìß Internal testers configured: ${{ vars.TESTFLIGHT_INTERNAL_TESTERS }}"
            echo "üîÑ Testers will be automatically notified when build is processed"
            echo "‚è±Ô∏è  Processing usually takes 5-15 minutes"
          else
            echo "‚ÑπÔ∏è No internal testers configured via TESTFLIGHT_INTERNAL_TESTERS variable"
            echo "üí° Add testers manually in App Store Connect ‚Üí TestFlight ‚Üí Internal Testing"
          fi

      # Clean up API key
      - name: Clean up API key
        if: always()
        run: |
          rm -f ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}.p8

      # Upload IPA as artifact backup
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-testflight-ipa
          path: ${{ env.IPA_PATH }}
          retention-days: 7

      # Build Summary
      - name: Build Summary
        run: |
          echo "üéâ iOS TestFlight Build Complete!"
          echo "üì± Bundle ID: ${{ env.BUNDLE_ID }}"
          echo "üì± App Name: ${{ env.APP_NAME }}"
          echo "üîê Signed with: Apple Distribution (${{ secrets.APPLE_TEAM_ID }})"
          echo "‚úàÔ∏è Uploaded to TestFlight"
          echo "‚è±Ô∏è Build will be available for internal testing in 5-15 minutes"
          echo "üîó Check status: https://appstoreconnect.apple.com/apps"
