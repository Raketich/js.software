name: Build iOS Distribution

on:
  push:
    branches: [ci/tauri-workflows]
  pull_request:
    branches: [ci/tauri-workflows]
  workflow_dispatch:

jobs:
  build-ios-distribution:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install iOS Dependencies
        run: rustup target add aarch64-apple-ios

      - name: Install dependencies
        run: bun install

      - name: Build frontend
        run: bun run build

      # Import distribution certificate
      - name: Setup iOS distribution signing
        id: ios-signing
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
          p12-password: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ github.run_id }}
          create-keychain: true

      # Install provisioning profile with correct UUID naming
      - name: Install provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo -n "${{ secrets.IOS_ADHOC_PROVISIONING_PROFILE }}" | base64 --decode > adhoc.mobileprovision

          # Extract UUID from provisioning profile for proper naming
          PROFILE_UUID=$(security cms -D -i adhoc.mobileprovision | plutil -extract UUID xml1 - -o - | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')
          echo "Provisioning profile UUID: $PROFILE_UUID"

          # Extract profile name for verification
          PROFILE_NAME=$(security cms -D -i adhoc.mobileprovision | plutil -extract Name xml1 - -o - | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')
          echo "Provisioning profile name: $PROFILE_NAME"

          # Extract bundle ID for verification
          BUNDLE_ID=$(security cms -D -i adhoc.mobileprovision | plutil -extract Entitlements.application-identifier xml1 - -o - | sed -n 's/.*<string>[A-Z0-9]*\.\(.*\)<\/string>.*/\1/p')
          echo "Bundle ID from profile: $BUNDLE_ID"

          # Install with proper UUID naming (critical for Xcode recognition)
          cp adhoc.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision

          # Verify installation
          echo "Installed provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/

          # Double-check the installed profile
          echo "Verifying installed profile:"
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision | plutil -extract Name xml1 - -o - | plutil -p -

          # Store UUID for later use
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV

          # Clean up
          rm adhoc.mobileprovision

      # Add iOS team configuration to Tauri config
      - name: Add iOS section with developmentTeam
        run: |
          # Add iOS section to bundle in tauri.conf.json
          if grep -q '"iOS": {' src-tauri/tauri.conf.json; then
            echo "iOS section exists, updating developmentTeam"
            sed -i '' 's/"developmentTeam": "[^"]*"/"developmentTeam": "${{ secrets.APPLE_TEAM_ID }}"/' src-tauri/tauri.conf.json
          else
            echo "Adding iOS section to bundle"
            # Create temp file with iOS section added
            jq '.bundle.iOS = {"developmentTeam": "${{ secrets.APPLE_TEAM_ID }}"}' src-tauri/tauri.conf.json > tmp.json && mv tmp.json src-tauri/tauri.conf.json
          fi

          # Verify the change
          echo "Updated tauri.conf.json iOS section:"
          grep -A 3 '"iOS"' src-tauri/tauri.conf.json || echo "iOS section not found"

      # Initialize Tauri iOS project
      - name: Initialize Tauri iOS
        run: bun run tauri ios init

      # Critical fixes based on our local debugging
      - name: Apply distribution signing fixes
        run: |
          echo "🔧 Applying comprehensive distribution signing fixes..."

          PBXPROJ_FILE="src-tauri/gen/apple/app.xcodeproj/project.pbxproj"

          # 1. Fix bundle ID from com.jssoftware.ui to software.js.ui
          echo "1️⃣ Fixing bundle ID..."
          sed -i '' 's/com\.jssoftware\.ui/software.js.ui/g' "$PBXPROJ_FILE"

          # 2. Switch ALL instances from automatic to manual signing
          echo "2️⃣ Switching to manual signing (comprehensive)..."
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' "$PBXPROJ_FILE"
          sed -i '' 's/"CODE_SIGN_STYLE\[sdk=iphoneos\*\]" = Automatic;/"CODE_SIGN_STYLE[sdk=iphoneos*]" = Manual;/g' "$PBXPROJ_FILE"

          # Also ensure no leftover automatic signing
          sed -i '' 's/ProvisioningStyle = Automatic;/ProvisioningStyle = Manual;/g' "$PBXPROJ_FILE"

          # 3. Set distribution code sign identity comprehensively
          echo "3️⃣ Setting iPhone Distribution identity..."
          sed -i '' 's/"CODE_SIGN_IDENTITY\[sdk=iphoneos\*\]" = "iPhone Developer";/"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Distribution";/g' "$PBXPROJ_FILE"
          sed -i '' 's/CODE_SIGN_IDENTITY = "iPhone Developer";/CODE_SIGN_IDENTITY = "iPhone Distribution";/g' "$PBXPROJ_FILE"
          sed -i '' 's/"iPhone Developer"/"iPhone Distribution"/g' "$PBXPROJ_FILE"

          # 4. Add development team everywhere needed
          echo "4️⃣ Setting development team..."
          sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "${{ secrets.APPLE_TEAM_ID }}";/g' "$PBXPROJ_FILE"

          # Add DEVELOPMENT_TEAM if missing - using printf for proper formatting
          if ! grep -q "DEVELOPMENT_TEAM" "$PBXPROJ_FILE"; then
            sed -i '' '/CODE_SIGN_IDENTITY.*iPhone Distribution/a\
          				DEVELOPMENT_TEAM = "${{ secrets.APPLE_TEAM_ID }}";' "$PBXPROJ_FILE"
          fi

          # 5. Add provisioning profile specifier for all configurations
          echo "5️⃣ Adding provisioning profile specifier..."

          # Remove any existing PROVISIONING_PROFILE_SPECIFIER
          sed -i '' '/PROVISIONING_PROFILE_SPECIFIER/d' "$PBXPROJ_FILE"

          # Add PROVISIONING_PROFILE_SPECIFIER after each CODE_SIGN_IDENTITY line
          sed -i '' '/CODE_SIGN_IDENTITY.*iPhone Distribution/a\
          				PROVISIONING_PROFILE_SPECIFIER = "'$PROFILE_UUID'";' "$PBXPROJ_FILE"

          # 6. Remove any PROVISIONING_PROFILE settings (UUID-based, not name-based)
          echo "6️⃣ Cleaning up old provisioning profile settings..."
          sed -i '' '/PROVISIONING_PROFILE = /d' "$PBXPROJ_FILE"

          echo "✅ All comprehensive distribution fixes applied!"

          # 7. Verification - show what we changed
          echo ""
          echo "🔍 Verification of changes:"
          echo "Bundle ID occurrences:"
          grep -c "software.js.ui" "$PBXPROJ_FILE" || echo "0"
          echo "Manual signing occurrences:"
          grep -c "CODE_SIGN_STYLE = Manual" "$PBXPROJ_FILE" || echo "0"
          echo "Distribution identity occurrences:"  
          grep -c "iPhone Distribution" "$PBXPROJ_FILE" || echo "0"
          echo "Profile specifier occurrences:"
          grep -c "PROVISIONING_PROFILE_SPECIFIER" "$PBXPROJ_FILE" || echo "0"

      # Verify configuration before build
      - name: Verify configuration
        run: |
          echo "📋 Final configuration verification:"
          echo "Bundle ID in pbxproj:"
          grep -A 1 "PRODUCT_BUNDLE_IDENTIFIER" src-tauri/gen/apple/app.xcodeproj/project.pbxproj | head -2
          echo ""
          echo "Code signing style:"
          grep "CODE_SIGN_STYLE" src-tauri/gen/apple/app.xcodeproj/project.pbxproj | head -1
          echo ""
          echo "Code sign identity:"
          grep "CODE_SIGN_IDENTITY" src-tauri/gen/apple/app.xcodeproj/project.pbxproj | head -1
          echo ""
          echo "Provisioning profile specifier:"
          grep "PROVISIONING_PROFILE_SPECIFIER" src-tauri/gen/apple/app.xcodeproj/project.pbxproj | head -1
          echo ""
          echo "Available certificates:"
          security find-identity -v -p codesigning
          echo ""
          echo "Installed profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/

      # Create export options for the build
      - name: Create exportOptions.plist
        run: |
          echo "📝 Creating exportOptions.plist for export..."

          cat > exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>ad-hoc</string>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>software.js.ui</key>
                  <string>${PROFILE_UUID}</string>
              </dict>
          </dict>
          </plist>
          EOF

          echo "Created exportOptions.plist:"
          cat exportOptions.plist

      # Build for distribution
      - name: Build iOS app for distribution
        env:
          DEVELOPER_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          IOS_SIGNING_IDENTITY: "iPhone Distribution"
          IOS_PROVISIONING_PROFILE: ${{ env.PROFILE_UUID }}
          CODE_SIGN_IDENTITY: "iPhone Distribution"
          PROVISIONING_PROFILE_SPECIFIER: ${{ env.PROFILE_UUID }}
        run: |
          echo "🚀 Building iOS app for distribution..."
          echo "Using signing identity: $IOS_SIGNING_IDENTITY"
          echo "Using provisioning profile: $IOS_PROVISIONING_PROFILE"
          echo "Team ID: $DEVELOPER_TEAM_ID"

          # Show what profiles are available for export
          echo "Profiles available to xcodebuild:"
          find ~/Library/MobileDevice/Provisioning\ Profiles -name "*.mobileprovision" -exec basename {} \; 2>/dev/null || echo "No profiles found"

          # Try with explicit signing environment and export options
          bun tauri ios build --export-method release-testing -- --exportOptionsPlist exportOptions.plist

      # Find and upload IPA to Diawi
      - name: Upload to Diawi
        run: |
          # Find the built IPA file
          IPA_PATH=$(find src-tauri -name "*.ipa" -type f | head -n 1)

          if [ -z "$IPA_PATH" ]; then
            echo "❌ No IPA file found!"
            find src-tauri -name "*.ipa" -type f
            exit 1
          fi

          echo "📱 Found IPA: $IPA_PATH"

          # Upload to Diawi
          echo "🌐 Uploading to Diawi..."
          RESPONSE=$(curl -w "%{http_code}" -s \
            -F token="${{ secrets.DIAWI_TOKEN }}" \
            -F file="@${IPA_PATH}" \
            -F find_by_udid=1 \
            -F wall_of_apps=1 \
            "https://upload.diawi.com/")

          HTTP_CODE="${RESPONSE: -3}"
          RESPONSE_BODY="${RESPONSE%???}"

          if [ "$HTTP_CODE" -eq 200 ]; then
            JOB_ID=$(echo "$RESPONSE_BODY" | jq -r '.job')
            echo "✅ Upload initiated. Job ID: $JOB_ID"
            
            # Poll for completion
            for i in {1..30}; do
              sleep 10
              STATUS_RESPONSE=$(curl -s "https://upload.diawi.com/status?token=${{ secrets.DIAWI_TOKEN }}&job=${JOB_ID}")
              STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status')
              
              if [ "$STATUS" = "2000" ]; then
                HASH=$(echo "$STATUS_RESPONSE" | jq -r '.hash')
                echo "🎉 Upload completed!"
                echo "🔗 Diawi link: https://i.diawi.com/$HASH"
                echo "DIAWI_LINK=https://i.diawi.com/$HASH" >> $GITHUB_ENV
                break
              elif [ "$STATUS" = "4000" ]; then
                echo "❌ Upload failed: $(echo "$STATUS_RESPONSE" | jq -r '.message')"
                exit 1
              fi
              
              echo "⏳ Still processing... (attempt $i/30)"
            done
          else
            echo "❌ Upload failed with HTTP $HTTP_CODE: $RESPONSE_BODY"
            exit 1
          fi

      # Upload IPA as artifact backup
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-distribution-ipa
          path: ${{ env.IPA_PATH }}
          retention-days: 7

      # Summary
      - name: Build Summary
        run: |
          echo "🎉 iOS Distribution Build Complete!"
          echo "📱 Bundle ID: software.js.ui"
          echo "🔐 Signed with: iPhone Distribution (DA9798GQ27)"
          echo "📋 Profile: JS Software UI Ad Hoc"
          echo "🌐 Diawi Link: ${{ env.DIAWI_LINK }}"
