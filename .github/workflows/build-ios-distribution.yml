name: Build iOS Distribution

on:
  push:
    branches: [ci/tauri-workflows]
  pull_request:
    branches: [ci/tauri-workflows]
  workflow_dispatch:

jobs:
  build-ios-distribution:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios

      - name: Install dependencies
        run: |
          bun install
          bun add @tauri-apps/cli@latest

      - name: Setup iOS build environment
        run: |
          # Install iOS targets
          rustup target add aarch64-apple-ios

          # Create directories for certificates and profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles/
          mkdir -p ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles/

          # Install distribution certificate
          echo "$IOS_DISTRIBUTION_CERTIFICATE" | base64 --decode > certificate.p12
          security create-keychain -p temp_password ios-build.keychain
          security default-keychain -s ios-build.keychain
          security unlock-keychain -p temp_password ios-build.keychain
          security import certificate.p12 -k ios-build.keychain -P "$IOS_DISTRIBUTION_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k temp_password ios-build.keychain

          # Install provisioning profile
          echo "$IOS_ADHOC_PROVISIONING_PROFILE" | base64 --decode > profile.mobileprovision
          # Extract UUID from provisioning profile for proper naming
          PROFILE_UUID=$(security cms -D -i profile.mobileprovision | plutil -extract UUID xml1 - -o - | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
          cp profile.mobileprovision ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision

          # Clean up temporary files
          rm certificate.p12 profile.mobileprovision
        env:
          IOS_DISTRIBUTION_CERTIFICATE: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
          IOS_DISTRIBUTION_CERTIFICATE_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          IOS_ADHOC_PROVISIONING_PROFILE: ${{ secrets.IOS_ADHOC_PROVISIONING_PROFILE }}

      - name: Build frontend
        run: bun run build

      - name: Build iOS app for ad-hoc distribution
        run: |
          bun run tauri ios build --export-method release-testing --verbose
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          IOS_CERTIFICATE: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          IOS_MOBILE_PROVISION: ${{ secrets.IOS_ADHOC_PROVISIONING_PROFILE }}
          CI: true

      - name: Upload to Diawi
        run: |
          # Find the generated IPA file
          IPA_PATH=$(find src-tauri/gen/apple/build -name "*.ipa" -type f | head -1)

          if [ -z "$IPA_PATH" ]; then
            echo "‚ùå No IPA file found"
            exit 1
          fi

          echo "üì± Found IPA: $IPA_PATH"

          # Upload to Diawi
          RESPONSE=$(curl -w "%{http_code}" -s \
            -F token="${DIAWI_TOKEN}" \
            -F file="@${IPA_PATH}" \
            -F find_by_udid=1 \
            -F wall_of_apps=1 \
            "https://upload.diawi.com/")

          HTTP_CODE="${RESPONSE: -3}"
          RESPONSE_BODY="${RESPONSE%???}"

          if [ "$HTTP_CODE" -eq 200 ]; then
            JOB_ID=$(echo "$RESPONSE_BODY" | jq -r '.job')
            echo "‚úÖ Upload initiated. Job ID: $JOB_ID"
            
            # Poll for completion
            for i in {1..30}; do
              sleep 10
              STATUS_RESPONSE=$(curl -s "https://upload.diawi.com/status?token=${DIAWI_TOKEN}&job=${JOB_ID}")
              STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status')
              
              if [ "$STATUS" = "2000" ]; then
                HASH=$(echo "$STATUS_RESPONSE" | jq -r '.hash')
                echo "‚úÖ Upload completed!"
                echo "üîó Diawi link: https://i.diawi.com/$HASH"
                break
              elif [ "$STATUS" = "4000" ]; then
                echo "‚ùå Upload failed: $(echo "$STATUS_RESPONSE" | jq -r '.message')"
                exit 1
              fi
              
              echo "‚è≥ Still processing... (attempt $i/30)"
            done
          else
            echo "‚ùå Upload failed with HTTP $HTTP_CODE: $RESPONSE_BODY"
            exit 1
          fi
        env:
          DIAWI_TOKEN: ${{ secrets.DIAWI_TOKEN }}
