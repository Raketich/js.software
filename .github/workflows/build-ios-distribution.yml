name: Build iOS Distribution

on:
  push:
    branches: [ci/tauri-workflows]
  pull_request:
    branches: [ci/tauri-workflows]
  workflow_dispatch:

jobs:
  build-ios-distribution:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install iOS Dependencies
        run: rustup target add aarch64-apple-ios

      - name: Install dependencies
        run: bun install

      - name: Build frontend
        run: bun run build

      # Use the same certificate import method as the working workflow
      - name: Setup iOS signing
        id: ios-signing
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE }}
          p12-password: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ github.run_id }}

      - name: Install provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo -n "${{ secrets.IOS_ADHOC_PROVISIONING_PROFILE }}" | base64 --decode > adhoc.mobileprovision

          # Extract UUID from provisioning profile for proper naming
          PROFILE_UUID=$(security cms -D -i adhoc.mobileprovision | plutil -extract UUID xml1 - -o - | sed -n 's/.*<string>\(.*\)<\/string>.*/\1/p')
          echo "Provisioning profile UUID: $PROFILE_UUID"

          # Install with proper UUID naming
          cp adhoc.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision

          # Verify installation
          echo "Installed provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/

          # Check profile contents
          echo "Profile details:"
          security cms -D -i adhoc.mobileprovision | plutil -p -

          # Clean up
          rm adhoc.mobileprovision

      - name: Add iOS section with developmentTeam
        run: |
          # First check if we need to add iOS section
          if grep -q '"iOS": {' src-tauri/tauri.conf.json; then
            echo "iOS section exists, checking for developmentTeam"
            if grep -q '"developmentTeam"' src-tauri/tauri.conf.json; then
              echo "Updating existing developmentTeam"
              sed -i '' 's/"developmentTeam": "[^"]*"/"developmentTeam": "${{ secrets.APPLE_TEAM_ID }}"/' src-tauri/tauri.conf.json
            else
              echo "Adding developmentTeam to existing iOS section"
              sed -i '' 's/"iOS": {/"iOS": {\n      "developmentTeam": "${{ secrets.APPLE_TEAM_ID }}",/' src-tauri/tauri.conf.json
            fi
          else
            echo "Adding iOS section to bundle"
            sed -i '' '/"bundle": {/,/^  }/ s/"targets": "all",/"targets": "all",\n    "iOS": {\n      "developmentTeam": "${{ secrets.APPLE_TEAM_ID }}"\n    },/' src-tauri/tauri.conf.json
          fi

          # Verify the change
          echo "Updated tauri.conf.json:"
          cat src-tauri/tauri.conf.json

      - name: Initialize Tauri iOS
        run: bun run tauri ios init

      # Use automatic signing like the working workflow, but for distribution
      - name: Configure automatic code signing for distribution
        run: |
          # Create the Xcode project directory if it doesn't exist
          xcodebuild -project src-tauri/gen/apple/app.xcodeproj -list

          # Get the provisioning profile UUID
          PROFILE_UUID=$(find ~/Library/MobileDevice/Provisioning\ Profiles/ -name "*.mobileprovision" -exec basename {} .mobileprovision \; | head -1)
          echo "Using provisioning profile UUID: $PROFILE_UUID"

          # Configure automatic code signing (like the working workflow)
          /usr/libexec/PlistBuddy -c "Add :objects:*:buildSettings:CODE_SIGN_STYLE string Automatic" src-tauri/gen/apple/app.xcodeproj/project.pbxproj 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:CODE_SIGN_STYLE Automatic" src-tauri/gen/apple/app.xcodeproj/project.pbxproj 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Add :objects:*:buildSettings:DEVELOPMENT_TEAM string ${{ secrets.APPLE_TEAM_ID }}" src-tauri/gen/apple/app.xcodeproj/project.pbxproj 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:DEVELOPMENT_TEAM ${{ secrets.APPLE_TEAM_ID }}" src-tauri/gen/apple/app.xcodeproj/project.pbxproj 2>/dev/null || true

          # Set provisioning profile UUID for automatic signing
          /usr/libexec/PlistBuddy -c "Add :objects:*:buildSettings:PROVISIONING_PROFILE_SPECIFIER string $PROFILE_UUID" src-tauri/gen/apple/app.xcodeproj/project.pbxproj 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :objects:*:buildSettings:PROVISIONING_PROFILE_SPECIFIER $PROFILE_UUID" src-tauri/gen/apple/app.xcodeproj/project.pbxproj 2>/dev/null || true

          # Directly modify the Info.plist after project initialization
          mkdir -p src-tauri/gen/apple/app_iOS || true
          /usr/libexec/PlistBuddy -c "Add :CFBundleIdentifier string software.js.ui" src-tauri/gen/apple/app_iOS/Info.plist 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier software.js.ui" src-tauri/gen/apple/app_iOS/Info.plist 2>/dev/null || true

      - name: Create export options for ad-hoc distribution
        run: |
          cat > ExportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>ad-hoc</string>
              <key>teamID</key>
              <string>${{ secrets.APPLE_TEAM_ID }}</string>
              <key>signingStyle</key>
              <string>automatic</string>
          </dict>
          </plist>
          EOF

          # Verify the file was created properly
          cat ExportOptions.plist

          # Copy to the Xcode project directory for easier access
          cp ExportOptions.plist src-tauri/gen/apple/

      - name: Build iOS app for ad-hoc distribution
        env:
          DEVELOPER_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Debug Info
          echo "Checking provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          echo "Verifying Tauri config iOS section:"
          cat src-tauri/tauri.conf.json | grep -A 5 iOS

          # Debug keychain info
          echo "Available identities:"
          security find-identity -v -p codesigning

          # Build for iOS with ad-hoc distribution
          bun tauri ios build --export-method ad-hoc

      - name: Find and upload IPA
        run: |
          # Find the built IPA file
          IPA_PATH=$(find src-tauri -name "*.ipa" -type f | head -n 1)
          if [ -z "$IPA_PATH" ]; then
            echo "No IPA file found!"
            find src-tauri -name "*.ipa" -type f
            exit 1
          fi
          echo "Found IPA at: $IPA_PATH"

          # Upload as artifact
          echo "ipa-path=$IPA_PATH" >> $GITHUB_OUTPUT

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-distribution-ipa
          path: ${{ steps.find-ipa.outputs.ipa-path }}
          retention-days: 30
